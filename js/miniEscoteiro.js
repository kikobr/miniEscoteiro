// Generated by CoffeeScript 1.4.0
(function() {
  var context, source, template;

  source = $("#entry-template").html();

  template = Handlebars.compile(source);

  context = {
    name: 'kiko'
  };

  $("body").html(template(context));

  urls = [
    {
		url: '/',
		name: 'index',
		template: '',
		context: {
			name: "x",
		}
	},
	{
		url: '/algo',
		name: 'algo',
		template: '',
		context: {
			name: "aee"
		}
	}
];


  appModel = {
	name: 'index',
	element: '#div',
	template: '',
	context: {},
	children: [
		{
			name: 'algo1',
			element: '#div',
			template: '',
			context: {},
			children: [
				{
					name: 'algo2',
					element: '#div',
					template: '',
					context: {},
					children: [
						{
							name: 'algo3',
							element: '#div',
							template: '',
							context: {},
							children: [
								{
									name: 'algo4',
									element: '#div',
									template: '',
									context: {},
									children: []
								}
							]
						}
					]
				},
				{
					name: 'algo2-2',
					element: '#div',
					template: '',
					context: {},
					children: [
						{
							name: 'algo3',
							element: '#div',
							template: '',
							context: {},
							children: [
								{
									name: 'algo45',
									element: '#div',
									template: '',
									context: {},
									children: []
								}
							]
						}
					]
				},
				{
					name: 'algo2-3',
					element: '#div',
					template: '',
					context: {},
					children: []
				},
				{
					name: 'algo2-4',
					element: '#div',
					template: '',
					context: {},
					children: []
				}
			]
		},
	]
}
;


  Object.size = function(obj) {
    var key, size;
    size = 0;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };

  $.fn.miniEscoteiro = function(params) {
    var _this;
    this.model = params;
    this.defaultRoute = this.currentRoute = params.name || 'index';
    _this = this;
    this.born = function() {
      return console.log(this.getRoutePath('algo4'));
    };
    this.render = function() {
      return '';
    };
    this.getRoutePath = function(name) {
      var breakLoop, buildingPath, cleanPath, routePath, traverse;
      routePath = "";
      buildingPath = "";
      breakLoop = false;
      traverse = function(obj) {
        var child, i, propName, propValue, stopLoop, _results;
        _results = [];
        for (propName in obj) {
          propValue = obj[propName];
          if (breakLoop) {
            break;
          }
          if (propName === 'name') {
            buildingPath += "" + propValue + "/";
          }
          if (propValue === name) {
            routePath = buildingPath;
            stopLoop = true;
            break;
          }
          if (propName === "children") {
            if (propValue.length) {
              _results.push((function() {
                var _results1;
                _results1 = [];
                for (i in propValue) {
                  child = propValue[i];
                  traverse(child);
                  _results1.push(cleanPath());
                }
                return _results1;
              })());
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      cleanPath = function() {
        var regex;
        regex = /\/([^\/]+)\/$/;
        return buildingPath = buildingPath.replace(regex, '/');
      };
      traverse(this.model);
      return routePath;
    };
    this.born();
    return this;
  };

  window.yay = $.fn.miniEscoteiro(appModel);

}).call(this);
